using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;


using Lib.UX.DataGrid;
using Orders.Logic;
using Orders.Logic.Models;
using Orders.Logic.DataModules;
using Orders.Logic.Entities;


namespace Orders.UX
{
    public partial class CFormTemplateTable : Form
    {

        // ....................................................................
        public IEntity? GridCurrentEntry
        {
            get
            {
                IEntity? oResult = null;
                if (this.gridRecords.CurrentRow != null)
                    oResult = this.gridRecords.CurrentRow.DataBoundItem as IEntity;

                return oResult;
            }
        }
        // ....................................................................


        // --------------------------------------------------------------------------------------
        public CFormTemplateTable()
        {
            InitializeComponent();
        }
        // --------------------------------------------------------------------------------------
        private void DoOnAddRow(object sender, DataGridViewRowsAddedEventArgs e)
        {
            if (this.GridCurrentEntry != null)
            {
                Debug.WriteLine("Add Row");
                this.GridCurrentEntry.Change = EntityChangeType.CREATED;
            }
        }
        // --------------------------------------------------------------------------------------
        private void DoOnEditRow(object sender, DataGridViewCellEventArgs e)
        {
            if (this.GridCurrentEntry != null)
            {
                Debug.WriteLine("Column Edit");
                this.GridCurrentEntry.Change = EntityChangeType.UPDATED;
                this.gridRecords.Refresh();
            }
        }
        // --------------------------------------------------------------------------------------
        private void DoOnGridKeyDown(object sender, KeyEventArgs e)
        {
            if (IsModuleLoaded() && (!this.gridRecords.ReadOnly))
            {
                switch (e.KeyCode)
                {
                    case Keys.Delete:
                        {
                            if (this.GridCurrentEntry != null)
                            {
                                DialogResult oResult = MessageBox.Show("Delete this record?", "Warning", MessageBoxButtons.YesNo
                                                            , MessageBoxIcon.Warning, MessageBoxDefaultButton.Button2);
                                if (oResult == DialogResult.Yes)
                                {
                                    this.GridCurrentEntry.Change = EntityChangeType.DELETED;
                                    Debug.WriteLine("Delete Row");

                                    this.gridRecords.Rows.RemoveAt(this.gridRecords.CurrentRow.Index);
                                    this.gridRecords.Refresh();
                                }
                            }
                            break;
                        }
                }
            }
        }
        // --------------------------------------------------------------------------------------
        // [PATTERNS] Template Method: The skeleton of the table editing form functionality is defined here,
        //  it lets a descendand override some parts with custom functionality, but the descendand cannot
        // fully override the logic
        public void DoLoad()
        {
            if (LoadModule())
                this.DisplayModelEntitiesOnGrid();
            else
                MessageBox.Show(LastErrorMessage(), " Error");
        }
        // --------------------------------------------------------------------------------------
        // [PATTERNS] Template Method: The skeleton of the table editing form functionality is defined here,
        //  it lets a descendand override some parts with custom functionality, but the descendand cannot
        // fully override the logic
        public void DoSave()
        {
            DialogResult oResult = MessageBox.Show("Save changes?", "Warning"
                , MessageBoxButtons.YesNo, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button2);
            if (oResult == DialogResult.Yes)
            { 
                if (SaveModule())
                {
                    this.gridRecords.DataSource = null;
                    if (LoadModule())
                        this.DisplayModelEntitiesOnGrid();
                    else
                        MessageBox.Show(LastErrorMessage(), "Error");
                }
                else
                    MessageBox.Show(LastErrorMessage(), "Error");
            }
        }
        // --------------------------------------------------------------------------------------
        private void DoOnAnyCommand(object sender, EventArgs e)
        {
            if (sender == this.btnLoadTable)
                DoLoad();
            else
                DoSave();
        }
        // --------------------------------------------------------------------------------------


        #region // Virtual Methods \\
        // --------------------------------------------------------------------------------------
        protected virtual void CreateDataModule()
        {
        }
        // --------------------------------------------------------------------------------------
        protected virtual void DisplayModelEntitiesOnGrid()
        {
        }
        // --------------------------------------------------------------------------------------
        protected virtual bool IsModuleLoaded()
        {
            return false;
        }
        // --------------------------------------------------------------------------------------
        protected virtual bool LoadModule()
        {
            return false;
        }
        // --------------------------------------------------------------------------------------
        protected virtual bool SaveModule()
        {
            return false;
        }
        // --------------------------------------------------------------------------------------
        protected virtual string LastErrorMessage()
        {
            return String.Empty;
        }
        // --------------------------------------------------------------------------------------
        #endregion
    }
}
